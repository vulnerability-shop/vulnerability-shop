import random
import json
from locust import FastHttpUser
from config import config
from common.catalog import get_items_page
import logging

def add_to_cart(http: FastHttpUser, auth_token, item_id, item_qty):
    url = f'{config["cart"]["host"]}/addCartItem'
    data = {
        'itemId': item_id,
        'itemQuantity': item_qty
    }

    with http.rest(method="POST", url=url, json=data, headers={'Authorization': auth_token}) as response:
        if response.js is not None:
            logging.info(f'Added {item_qty} of Item: {item_id} to cart for User: {json.loads(response.text)["customerId"]}')
            return item_id, item_qty


def add_to_cart_random(http: FastHttpUser, auth_token):
    nb_items = random.randint(1, 3)
    items_added = []
    for _ in range(nb_items):
        items = get_items_page(http)
        item = items[random.randint(1, len(items) - 1)]
        item_id = item['id']
        item_stock = item['stock']
        if item_stock <= 0:
            continue
        item_qty = random.randint(1, min(item_stock, 5))
        add_to_cart(http, auth_token, item_id, item_qty)
        items_added.append([item_id, item_qty])
    return items_added


def clear_cart(http: FastHttpUser, auth_token):
    url = f'{config["cart"]["host"]}/clearUserCart'
    with http.rest(method="DELETE", url=url, headers={'Authorization': auth_token}) as response:
        if response.js is not None:
            logging.info(f'Cart cleared for User: {auth_token}')


def update_cart_item(http: FastHttpUser, auth_token, item_id, item_qty):
    url = f'{config["cart"]["host"]}/updateCartItem'
    data = {
        'id': item_id,
        'itemQuantity': item_qty
    }

    with http.rest(method="PUT", url=url, json=data, headers={'Authorization': auth_token}) as response:
        if response.js is not None:
            logging.info(f'Updated Item: {item_id}, to: {item_qty} for User: {json.loads(response.text)["customerId"]}')


def remove_cart_item(http: FastHttpUser, auth_token, item_id):
    url = f'{config["cart"]["host"]}/removeCartItem/{item_id}'

    with http.rest(method="DELETE", url=url, headers={'Authorization': auth_token}) as response:
        if response.js is not None:
            return


def get_cart_items(http: FastHttpUser, auth_token):
    url = f'{config["cart"]["host"]}/getUserItems'

    with http.rest(method="GET", url=url, headers={'Authorization': auth_token}) as response:
        if response.js is not None:
            items = json.loads(response.text)
            return items
