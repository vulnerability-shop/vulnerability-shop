import datetime
import os
from random import randrange
from locust import FastHttpUser, task, between, run_single_user
from config import config
from common.user import random_login
import json

class LegitReviewScenario(FastHttpUser):
    host = config["user"]["host"]
    #wait_time = between(1, 5)

    @task
    def main(self):
        # login
        auth = random_login(self)

        # get items
        # response = self.client.get(
        #     "http://localhost:5181/getItems?page=-1&size=20",
        #     headers={
        #         "Authorization": auth,
        #     }
        # )

        with self.rest(method="GET", url="http://localhost:5181/getItems?page=-1&size=20", headers={"Authorization": auth}) as response:
            if response.js is not None:
                items = json.loads(response.text)['data']
                print(items)
        return

        data = response.json()

        index = randrange(1, len(data["data"]))

        item = data["data"][index]

        itemId = item["id"]

        time = datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S.000Z")

        # post review
        response = self.client.post(
            "http://localhost:5183/postReview",
            headers={
                "Host": "localhost:5183",
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0",
                "Accept": "text/plain",
                "Accept-Language": "en-US,en;q=0.5",
                "Accept-Encoding": "gzip, deflate, br",
                "Referer": "http://localhost:5183/swagger/index.html",
                "Content-Type": "application/json",
                "Content-Length": "381",
                "Origin": "http://localhost:5183",
                "DNT": "1",
                "Connection": "keep-alive",
                "Sec-Fetch-Dest": "empty",
                "Sec-Fetch-Mode": "cors",
                "Sec-Fetch-Site": "same-origin",
                "Authorization": auth,
            },
            data="""{{
                "id": 0,
                "itemId": {0},
                "customerId": 1,
                "timeCreated": "{1}",
                "timeUpdated": "{1}",
                "title": "lorem ipsum",
                "reviewText": "dolor sit amet"
            }}""".format(
                itemId, time
            ),
        )

        reviewId = response.text

        folderpath = "scenarios\\review\\tmp"
        files = os.listdir(folderpath)
        filecount = len(files)
        fileindex = randrange(0, filecount - 1)
        attachement = open(os.path.join(folderpath, files[fileindex]), "rb")

        # post picture
        response = self.client.post(
            "http://localhost:5183/postPicture/" + str(reviewId),
            headers={
                "Authorization": auth,
            },
            files={"picture": attachement},
        )

        pictureId = response.text

        # get picture
        response = self.client.get(
            "http://localhost:5183/getPicture/" + str(pictureId),
            headers={
                "Host": "localhost:5183",
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0",
                "Accept": "*/*",
                "Accept-Language": "en-US,en;q=0.5",
                "Accept-Encoding": "gzip, deflate, br",
                "Referer": "http://localhost:5173/",
                "DNT": "1",
                "Connection": "keep-alive",
                "Sec-Fetch-Dest": "empty",
                "Sec-Fetch-Mode": "cors",
                "Sec-Fetch-Site": "same-origin",
                "Authorization": auth,
            },
        )

if __name__ == "__main__":
    run_single_user(LegitReviewScenario)
