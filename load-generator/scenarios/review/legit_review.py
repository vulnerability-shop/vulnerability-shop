import datetime
import os
from random import randrange
from locust import FastHttpUser, task, between, run_single_user
from config import config
from common.user import random_login
import json


class LegitReviewScenario(FastHttpUser):
    host = config["review"]["host"]
    cataloghost = config['catalog']['host']

    @task
    def main(self):
        # login
        auth = random_login(self)

        with self.rest(method="GET", url=self.cataloghost + "/getItems?page=-1&size=20",
                       headers={"Authorization": auth}) as response:
            if response.js is not None:
                data = json.loads(response.text)['data']

        index = randrange(1, len(data))

        item = data[index]

        itemId = item["id"]

        time = datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S.000Z")

        # post review
        with self.rest(
                method="POST",
                url=self.host + "/postReview",
                headers={
                    "Authorization": auth
                },
                json={
                    "id": 0,
                    "itemId": itemId,
                    "customerId": 1,
                    "timeCreated": time,
                    "timeUpdated": time,
                    "title": "lorem ipsum",
                    "reviewText": "dolor sit amet"
                }
        ) as response:
            if response.text is not None:
                reviewId = response.text

        script_dir = os.path.dirname(os.path.dirname(__file__))
        folderpath = os.path.join(script_dir, 'review', 'tmp')
        files = os.listdir(folderpath)
        filecount = len(files)
        fileindex = randrange(0, filecount - 1)
        attachement = open(os.path.join(folderpath, files[fileindex]), "rb")

        # post picture
        response = self.client.post(
            self.host + "/postPicture/" + str(reviewId),
            headers={
                "Authorization": auth,
            },
            files={"picture": attachement},
        )

        pictureId = response.json()['id']

        # get picture
        response = self.client.get(
            self.host + "/getPicture/" + str(pictureId),
            headers={
                "Host": "localhost:5183",
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0",
                "Accept": "*/*",
                "Accept-Language": "en-US,en;q=0.5",
                "Accept-Encoding": "gzip, deflate, br",
                "Referer": "http://localhost:5173/",
                "DNT": "1",
                "Connection": "keep-alive",
                "Sec-Fetch-Dest": "empty",
                "Sec-Fetch-Mode": "cors",
                "Sec-Fetch-Site": "same-origin",
                "Authorization": auth,
            },
        )


if __name__ == "__main__":
    run_single_user(LegitReviewScenario)
