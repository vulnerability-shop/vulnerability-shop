from locust import FastHttpUser, task, run_single_user
import os

from config import config


class AdminScenario(FastHttpUser):

    host = config["user"]["host"]

    # @task
    # def exec(self):
    #     with self.rest("POST", "/exec", json={"command": "echo test"}) as response:
    #         if response.status_code == 200:
    #             print(response.text)

    # @task
    # def importImage(self):
    #     commands = []
    #     commands.append("apk add git")
    #     commands.append("ls /var/run | grep docker.sock")
    #     commands.append("go version")
    #     commands.append("go get github.com/docker/docker/client")
    #     commands.append("go get github.com/docker/docker/api/types")
    #     listContainerPath = os.path.join(os.path.dirname(__file__),
    #                                      "..\\..\\ressources\\docker-import-img.txt")
    #     with open(listContainerPath, 'r') as file:
    #         data = file.read()
    #     commands.append(data)
    #     commands.append("go run ./docker-import-img.go")
    #     for index, command in enumerate(commands):
    #         with self.rest("POST", "/exec", data=command) as response:
    #             if response.status_code == 200:
    #                 print(response.text)
    #             else:
    #                 print(response.status_code)

    @task
    def listContainers(self):
        commands = []
        commands.append("apk add git")
        commands.append("ls /var/run | grep docker.sock")
        commands.append("go version")
        commands.append("go get github.com/docker/docker/client")
        commands.append("go get github.com/docker/docker/api/types")
        listContainerPath = os.path.join(os.path.dirname(__file__),
                                         "..\\..\\ressources\\docker-list-containers.txt")
        with open(listContainerPath, 'r') as file:
            data = file.read()
        commands.append(data)
        commands.append("go run ./docker-list-containers.go")
        for index, command in enumerate(commands):
            with self.rest("POST", "/exec", json={"command": command}) as response:
                if response.status_code == 200:
                    print(response.text())
                else:
                    print(response.status_code)

    # @task
    # def killContainer(self):
    #     commands = []
    #     commands.append("apk add git")
    #     commands.append("ls /var/un | grep docker.sock")
    #     commands.append("go version")
    #     commands.append("go get github.com/docker/docker/client")
    #     commands.append("go get github.com/docker/docker/api/types")
    #     commands.append("export DOCKER_API_VERSION=1.39")
    #     listContainerPath = os.path.join(os.path.dirname(__file__),
    #                                     "..\\..\\ressources\\docker-kill-container.txt")
    #     with open(listContainerPath, 'r') as file:
    #        data = file.read()
    #     commands.append(data)
    #     commands.append("go run ./docker-kill-container.go")
    #     for index, command in enumerate(commands):
    #         with self.rest("POST", "/exec", json={"command": command}) as response:
    #             if response.status_code == 200:
    #                 print(response.text)


if __name__ == "__main__":
    run_single_user(AdminScenario)
