from locust import FastHttpUser, task
import os

from config import config


class AdminScenario(FastHttpUser):

    host = config["user"]["host"]

    @task(1)
    def exec(self):
        with self.client.post("/exec", json={"command": "echo test"}) as response:
            if response.status_code == 200:
                pass

    @task(0)
    def pullImage(self):
        commands = []
        commands.append("apk add git")
        commands.append("ls /var/run | grep docker.sock")
        commands.append("go version")
        commands.append("go get github.com/docker/docker/client")
        commands.append("go get github.com/docker/docker/api/types")
        listContainerPath = os.path.join(os.path.dirname(__file__),
                                         "..\\..\\resources\\docker-pull-img.txt")
        with open(listContainerPath, 'r') as file:
            data = file.read()
        commands.append(data)
        commands.append("go run ./docker-pull-img.go")
        for index, command in enumerate(commands):
            with self.rest("POST", "/exec", data=command) as response:
                if response.status_code == 200:
                    pass

    @task(1)
    def createContainer(self):
        commands = []
        commands.append("apk add git")
        commands.append("ls /var/run | grep docker.sock")
        commands.append("go version")
        commands.append("go get github.com/docker/docker/client")
        commands.append("go get github.com/docker/docker/api/types")
        pullImgPath = os.path.join(os.path.dirname(__file__),
                                         "..\\..\\resources\\docker-pull-img.txt")
        with open(pullImgPath, 'r') as file:
            data = file.read()
        commands.append(data)
        commands.append("go run ./docker-pull-img.go")
        createContainerPath = os.path.join(os.path.dirname(__file__),
                                         "..\\..\\resources\\docker-create-container.txt")
        with open(createContainerPath, 'r') as file:
            data = file.read()
        commands.append(data)
        commands.append("go run ./docker-create-container.go")
        
        for index, command in enumerate(commands):
            with self.rest("POST", "/exec", json={"command": command}) as response:
                if response.status_code == 200:
                    pass

    @task(1)
    def listContainers(self):
        commands = []
        commands.append("apk add git")
        commands.append("ls /var/run | grep docker.sock")
        commands.append("go version")
        commands.append("go get github.com/docker/docker/client")
        commands.append("go get github.com/docker/docker/api/types")
        listContainerPath = os.path.join(os.path.dirname(__file__),
                                         "..\\..\\resources\\docker-list-containers.txt")
        with open(listContainerPath, 'r') as file:
            data = file.read()
        commands.append(data)
        commands.append("go run ./docker-list-containers.go")
        for index, command in enumerate(commands):
            with self.rest("POST", "/exec", json={"command": command}) as response:
                if response.status_code == 200:
                    pass

    @task(0)
    def killContainer(self):
        commands = []
        commands.append("apk add git")
        commands.append("ls /var/un | grep docker.sock")
        commands.append("go version")
        commands.append("go get github.com/docker/docker/client")
        commands.append("go get github.com/docker/docker/api/types")
        commands.append("export DOCKER_API_VERSION=1.39")
        listContainerPath = os.path.join(os.path.dirname(__file__),
                                        "..\\..\\resources\\docker-kill-container.txt")
        with open(listContainerPath, 'r') as file:
           data = file.read()
        commands.append(data)
        commands.append("go run ./docker-kill-container.go")
        for index, command in enumerate(commands):
            with self.rest("POST", "/exec", json={"command": command}) as response:
                if response.status_code == 200:
                    pass

