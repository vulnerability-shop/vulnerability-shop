import importlib
import inspect
import os
from glob import iglob
from typing import Type

from locust import User
from locust.env import Environment


def get_scenarios():
    scenarios_path = os.path.join(os.path.dirname(__file__), "scenarios")
    modules = []
    classes: list[Type[User]] = []

    # Retrieve all the scenarios submodules
    for file in iglob(os.path.join(scenarios_path, "**", "*.py"), recursive=True):
        module_name = os.path.splitext(os.path.relpath(file))[0].replace("\\", ".")

        if "__init__" not in module_name:
            modules.append(importlib.import_module(module_name))

    # Retrieve all the scenarios classes
    for module in modules:
        module_classes = ([m[0] for m in inspect.getmembers(module, inspect.isclass) if m[1].__module__ == module.__name__])
        for module_class in module_classes:
            classes.append(getattr(module, module_class))

    return classes


def main():
    env = Environment(user_classes=get_scenarios())
    env.create_local_runner()
    env.runner.start(1, spawn_rate=1)
    env.runner.greenlet.join()


if __name__ == "__main__":
    main()
