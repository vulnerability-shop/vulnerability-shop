using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using review.Domain;
using review.Persistence;

namespace review.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class ReviewController : ControllerBase
    {
        private readonly DataContext _dataContext;
        public ReviewController(DataContext dataContext)
        {
            _dataContext = dataContext;
        }

        [HttpGet("/getReviews")]
        public async Task<ActionResult<List<Review>>> GetReviews()
        {
            var reviews = await _dataContext.Reviews.FromSqlRaw($"select * from reviews").ToListAsync();
            return reviews;
        }


        [HttpGet("/getReview/{reviewId}")]
        public async Task<ActionResult<Review>> GetReview(string reviewId)
        {
            // regular method
            // var review = await _dataContext.Reviews.FindAsync(reviewId);   

            // vulnerable method
            /*
            SELECT r."Id", r."CustomerId", r."ItemId", r."ReviewText", r."TimeCreated", r."TimeUpdated", r."Title"
            FROM (
	            select *
	            from public."Reviews" where "Id" = '1' 
	            union select 0, 1, 1, now(), now(), "username", "password" from public."customer" where "username" = 'admin'
            ) AS r
            LIMIT 1
            */
            // example usage: 1' union select 0, 1, 1, now(), now(), "username", "password" from public."customer" where "username" = 'admin

            var review = await _dataContext.Reviews
                .FromSqlRaw($"select * from reviews where id = {reviewId}")
                .FirstOrDefaultAsync();

            if (review == null)
            {
                return NotFound();
            }
            return review;
        }

        [HttpGet("/getReviewsForItem/{itemId}")]
        public async Task<ActionResult<List<Review>>> GetReviewsForItem(int itemId)
        {
            var reviews = await _dataContext.Reviews
                .FromSqlRaw($"select * from reviews where itemid = '{itemId}'")
                .ToListAsync();

            return reviews;
        }

        [HttpPost("/postReview")]
        //public async Task<ActionResult<List<Review>>> PostReview(Review review)
        public async Task<ActionResult<int>> PostReview(Review review)
        {
            int userId;
            try
            {
                userId = int.Parse(HttpContext.Items["UserId"]?.ToString() ?? "");
            }
            catch (Exception e)
            {
                return Unauthorized();
            }

            //await _dataContext.Reviews
            var result = await _dataContext.Reviews
                .FromSqlRaw($"insert into reviews (itemid, customerid, timecreated, timeupdated, title, reviewtext) " +
                            $"values ({review.ItemId}, {review.CustomerId}, now(), now(), '{review.Title}', '{review.ReviewText}')" +
                            $"returning id, itemid, customerid, timecreated, timeupdated, title, reviewtext;")
                .ToListAsync();

            //return Ok();
            if (result != null && result.Count > 0)
            {
                return Ok(result[0].Id);
            }
            else
            {
                return BadRequest("Error adding review");
            }
        }

        [HttpGet("/getPictures/{reviewId}")]
        public async Task<ActionResult<List<ReviewPicture>>> GetPictures(int reviewId)
        {
            var pictures = await _dataContext.ReviewPictures.FromSqlRaw($"select * from reviewpictures where reviewid = '{reviewId}'").ToListAsync();
                
            return pictures;
        }

        [HttpPost("/postPicture/{reviewId}")]
        public async Task<IActionResult> PostPicture(int reviewId, IFormFile picture)
        {
            int userId;
            try
            {
                userId = int.Parse(HttpContext.Items["UserId"]?.ToString() ?? "");
            }
            catch (Exception e)
            {
                return Unauthorized();
            }

            var filePath = Path.Combine("/tmp/", picture.FileName);

            using (var stream = System.IO.File.Create(filePath))
            {
                await picture.CopyToAsync(stream);
            }

            await _dataContext.ReviewPictures
                .FromSqlRaw($"insert into reviewpictures (filename, reviewid) " +
                            $"values ('{picture.FileName}', '{reviewId}') " +
                            $"returning id, filename, reviewid;")
                .ToListAsync();

            return Ok();
        }

        [HttpGet("/getPicture/{pictureId}")]
        public FileResult GetPicture(int pictureId)
        {
            var picture = _dataContext.ReviewPictures
                .FromSqlRaw($"select * from reviewpictures where id = '{pictureId}'")
                .FirstOrDefaultAsync();

            var filePath = Path.Combine("/tmp/", picture.Result.FileName);

            var file = new FileStream(filePath, FileMode.Open, FileAccess.Read);

            var response = File(file, "application/octet-stream", picture.Result.FileName);

            return response;
        }
    }
}
