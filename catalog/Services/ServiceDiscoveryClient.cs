using System.Net.Http.Headers;
using System.Net.Sockets;
using System.Net;

namespace catalog.Services
{
    public class ServiceDiscoveryClient
    {
        private readonly HttpClient _httpClient;
        private readonly string _serviceNameConfig = "ServiceName";
        private readonly string _serviceDiscoveryConfig = "ServiceDiscovery:Url";
        private readonly string _sharedSecretConfig = "ServiceDiscovery:Url";


        private readonly string serviceName;
        private readonly string serviceDiscoveryUrl;
        private readonly string sharedSecret;



        public ServiceDiscoveryClient(IConfiguration configuration, HttpClient httpClient)
        {
            serviceName = configuration[_serviceNameConfig] ?? "catalog";
            serviceDiscoveryUrl = configuration[_serviceDiscoveryConfig] ?? "http://service-discovery";
            sharedSecret = configuration[_sharedSecretConfig] ?? "admin123";
            _httpClient = httpClient;
        }

        public async Task<bool> Register()
        {
            string url = serviceDiscoveryUrl + "/register?name=" + serviceName + "?address=" + GetLocalIPAddress() + ":80";
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("auth_token", sharedSecret);

            var response = await _httpClient.GetAsync(url);
            return response.IsSuccessStatusCode;
        }

        public async Task<string> GetService(string serviceName)
        {
            var url = serviceDiscoveryUrl + "/find?name=" + serviceName;
            var response = await _httpClient.GetAsync(url);
            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException("Failed to fetch services: " + serviceName + " from service discovery", null, response.StatusCode);
            }
            List<string> addresses = await response.Content.ReadFromJsonAsync<List<string>>() ?? throw new Exception("Problem parsing response");
            string address = addresses.OrderBy(x => Guid.NewGuid()).FirstOrDefault() ?? throw new Exception("Problem getting random address");
            return address;
        }

        public static string GetLocalIPAddress()
        {
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork)
                {
                    return ip.ToString();
                }
            }
            throw new Exception("No network adapters with an IPv4 address in the system!");
        }
    }
}
