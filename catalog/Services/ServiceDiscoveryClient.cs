using System.Net.Sockets;
using System.Net;
using catalog.Services.Interfaces;

namespace catalog.Services
{
    public class ServiceDiscoveryClient: IServiceDiscoveryClient
    {
        private readonly HttpClient _httpClient;
        private readonly string _serviceNameConfig = "ServiceName";
        private readonly string _serviceDiscoveryConfig = "ServiceDiscovery:Url";
        private readonly string _sharedSecretConfig = "ServiceDiscovery:Token";

        private readonly string serviceName;
        private readonly string serviceDiscoveryUrl;
        private readonly string sharedSecret;

        public ServiceDiscoveryClient(HttpClient httpClient, IConfiguration configuration)
        {
            _httpClient = httpClient;
            serviceName = configuration[_serviceNameConfig] ?? "catalog";
            serviceDiscoveryUrl = configuration[_serviceDiscoveryConfig] ?? "http://service-discovery";
            sharedSecret = configuration[_sharedSecretConfig] ?? "admin123";
        }

        public async Task<bool> Register()
        {
            string address = "http://" + GetLocalIPAddress();
            string url = serviceDiscoveryUrl + "/register?name=" + serviceName + "&address=" + address + ":80";
            _httpClient.DefaultRequestHeaders.Add("authtoken", sharedSecret);

            var response = await _httpClient.GetAsync(url);

            if(response.IsSuccessStatusCode)
            {
                Console.WriteLine("Service: " + serviceName + " successfully registered in the service discovery with address: " + address);
            }
            return response.IsSuccessStatusCode;
        }

        public async Task<string> GetService(string serviceName)
        {
            var url = serviceDiscoveryUrl + "/find?name=" + serviceName;
            var response = await _httpClient.GetAsync(url);
            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException("Failed to fetch services: " + serviceName + " from service discovery", null, response.StatusCode);
            }
            return await response.Content.ReadFromJsonAsync<string>() ?? throw new Exception("Problem parsing response");
        }

        public string GetLocalIPAddress()
        {
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork)
                {
                    return ip.ToString();
                }
            }
            throw new Exception("No network adapters with an IPv4 address in the system!");
        }
    }
}
