package api

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"strconv"

	"github.com/go-chi/render"
	"github.com/vulnerability-shop/vulnerability-shop/user/utils"
)

type User struct {
	Id          int    `json:"id"`
	Username    string `json:"username"`
	Password    string `json:"password"`
	Email       string `json:"email"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Address     string `json:"address"`
	PhoneNumber string `json:"phoneNumber"`
	Role        int    `json:"role"`
}

func retrieveUserFromId(id int) (User, error) {
	var user User

	err := utils.DB.QueryRow(context.Background(), "SELECT id, username, email, firstName, lastName, address, phoneNumber, user_role FROM Customer WHERE id=$1",
		strconv.Itoa(id)).Scan(&user.Id, &user.Username, &user.Email, &user.FirstName, &user.LastName, &user.Address, &user.PhoneNumber, &user.Role)
	if err != nil {
		return user, errors.New("failed retrieving user")
	}

	return user, nil
}

func GetUserFromId(w http.ResponseWriter, r *http.Request) {
	idParam := r.URL.Query().Get("id") // Retrieve id from query string
	id, err := strconv.Atoi(idParam)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
		return
	}

	// Vulnerability: Direct object reference. We use a GET to return all the user info minus the password without authentication
	user, err := retrieveUserFromId(id)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
		return
	}

	render.JSON(w, r, &user)
}

func (u User) updateUser() error {
	commandTag, err := utils.DB.Exec(context.Background(), "UPDATE Customer SET password=$1, email=$2, firstName=$3, lastName=$4, address=$5, phoneNumber=$6 WHERE id=$7", &u.Password, &u.Email,
		&u.FirstName, &u.LastName, &u.Address, &u.PhoneNumber, &u.Id)
	if err != nil {
		return err
	}

	if commandTag.RowsAffected() != 1 {
		return errors.New("no user found to update")
	}

	return nil
}

func UpdateUser(w http.ResponseWriter, r *http.Request) {
	var user User
	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	id := r.Context().Value(UserContext{}).(int)
	if id == -1 || id != user.Id {
		w.WriteHeader(http.StatusForbidden)
		return
	}

	err = user.updateUser()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
		return
	}

	w.Write([]byte("User updated successfully"))
}
