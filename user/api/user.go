package api

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"strconv"

	"github.com/go-chi/render"
	"github.com/vulnerability-shop/vulnerability-shop/user/utils"
)

type User struct {
	Id          int
	Username    string
	Password    string
	Email       string
	FirstName   string
	LastName    string
	Address     string
	PhoneNumber string
	Role        int
}

func retrieveUserFromId(id int) (User, error) {
	var user User

	err := utils.DB.QueryRow(context.Background(), "SELECT id, username, email, firstName, lastName, address, phoneNumber, user_role FROM Customer WHERE id=$1",
		strconv.Itoa(id)).Scan(&user.Id, &user.Username, &user.Email, &user.FirstName, &user.LastName, &user.Address, &user.PhoneNumber, &user.Role)
	if err != nil {
		fmt.Printf("Database query failed: %v\n", err)
		return user, errors.New("failed retrieving user")
	}

	return user, nil
}

func GetUserFromId(w http.ResponseWriter, r *http.Request) {
	idParam := r.URL.Query().Get("id") // Retrieve id from query string
	id, err := strconv.Atoi(idParam)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
		return
	}

	// Vulnerability: We return all the user info minus the password without authentication
	user, err := retrieveUserFromId(id)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
		return
	}

	render.JSON(w, r, &user)
}
