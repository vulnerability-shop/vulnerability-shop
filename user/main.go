package main

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/cors"
	"github.com/vulnerability-shop/vulnerability-shop/user/api"
	"github.com/vulnerability-shop/vulnerability-shop/user/utils"
)

func main() {
	const port = 80

	utils.ConnectDB()
	defer utils.DB.Close()

	router := chi.NewRouter()
	router.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"https://*", "http://*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300, // Maximum value not ignored by any of major browsers
	}))
	router.Use(api.ValidateTokenMiddleware)

	router.Post("/getUser", api.GetUserFromId)
	router.Post("/login", api.Login)
	router.Post("/register", api.Register)
	router.Post("/logout", api.Logout)

	// TO BE REMOVED - Shows how to get logged in username from context
	router.Get("/validate", func(w http.ResponseWriter, r *http.Request) {
		userId := r.Context().Value(api.UserContext{}).(int)
		w.Write([]byte(fmt.Sprint(userId)))
	})

	fmt.Printf("Launched user microservice on port %d\n", port)
	http.ListenAndServe(fmt.Sprintf(":%d", port), router)
}
