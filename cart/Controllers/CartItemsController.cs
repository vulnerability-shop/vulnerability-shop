using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using cart.Contexts;
using cart.Models;
using cart.Services;

namespace cart.Controllers
{
    [ApiController]
    public class CartItemsController : ControllerBase
    {
        private readonly CartDataContext _context;

        private CatalogHttpClient _catalogHttpClient;

        public CartItemsController(CartDataContext context)
        {
            _context = context;
            _catalogHttpClient = new CatalogHttpClient();
        }

        // GET: /getCartItems
        [HttpGet("/getCartItems")]
        public async Task<ActionResult<IEnumerable<CartItem>>> GetCartItems()
        {
          if (_context.CartItems == null)
          {
              return NotFound();
          }
            return await _context.CartItems.ToListAsync();
        }

        // GET: /getCartItem/5
        [HttpGet("/getCartItem/{id}")]
        public async Task<ActionResult<CartItem>> GetCartItem(int id)
        {
            if (_context.CartItems == null)
            {
                return NotFound();
            }
            var cartItem = await _context.CartItems.FindAsync(id);

            if (cartItem == null)
            {
                return NotFound();
            }

            return cartItem;
        }

        // PUT: /updateCartItem/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("/updateCartItem")]
        public async Task<IActionResult> PutCartItem([FromBody] CartItem newCartItem)
        {
            int userId;
            try
            {
                userId = int.Parse(HttpContext.Items["UserId"]?.ToString() ?? "");
            }
            catch (Exception e)
            {
                return Unauthorized();
            }

            var cartItem = await _context.CartItems.FindAsync(newCartItem.Id);
            if(cartItem == null)
            {
                return NotFound();
            }
            else if(cartItem.CustomerId != userId)
            {
                return Unauthorized();
            }
            
            cartItem.ItemQuantity = newCartItem.ItemQuantity;

            if(cartItem.ItemQuantity <= 0)
            {
                return await DeleteCartItem(cartItem.Id);
            }

            _context.Entry(cartItem).State = EntityState.Modified;

            await _context.SaveChangesAsync();

            return Ok(cartItem);
        }

        // POST: /addCartItem
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost("/addCartItem")]
        public async Task<ActionResult<CartItem>> PostCartItem([FromBody] CartItem cartItem)
        {
            try
            {
                cartItem.CustomerId = int.Parse(HttpContext.Items["UserId"]?.ToString() ?? "");
            }
            catch(Exception e)
            {
                return Unauthorized();
            }

            if (_context.CartItems == null)
            {
                return Problem("Entity set 'CartDataContext.CartItems'  is null.");
            }

            //Check if item exists, if so add quantities instead
            CartItem existingItem =  (await _context.CartItems.Where(item => item.CustomerId == cartItem.CustomerId && item.ItemId == cartItem.ItemId).ToListAsync()).First();
            if (existingItem != null)
            {
                existingItem.ItemQuantity += cartItem.ItemQuantity;
                _context.Entry(existingItem).State = EntityState.Modified;
                await _context.SaveChangesAsync();
            }
            else
            {
                _context.CartItems.Add(cartItem);
            }

            await _context.SaveChangesAsync();

            return CreatedAtAction("GetCartItem", new { Id = cartItem.Id }, cartItem);
        }

        // DELETE: /removeCartItem/5
        [HttpDelete("/removeCartItem/{id}")]
        public async Task<IActionResult> DeleteCartItem(int id)
        {
            int userId;
            try
            {
                userId = int.Parse(HttpContext.Items["UserId"]?.ToString() ?? "");
            }
            catch (Exception e)
            {
                return Unauthorized();
            }

            if (_context.CartItems == null)
            {
                return NotFound();
            }
            var cartItem = await _context.CartItems.FindAsync(id);
            if (cartItem == null || cartItem.CustomerId != userId)
            {
                return NotFound();
            }

            _context.CartItems.Remove(cartItem);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        // GET: /getUserItems
        [HttpGet("/getUserItems")]
		public async Task<ActionResult<List<CartItemDto>>> GetCartItemsByUser()
		{
            int userId;
            try
            {
                userId = int.Parse(HttpContext.Items["UserId"]?.ToString() ?? "");
            }
            catch (Exception e)
            {
                return Unauthorized();
            }

            if (_context.CartItems == null)
			{
				return NotFound();
			}

			List<CartItem> cartItems = await _context.CartItems.Where(c => c.CustomerId == userId).ToListAsync();

            List<CartItemDto> result = new List<CartItemDto>();
            foreach(var cartItem in cartItems)
            {
                ItemDto? itemDto = await _catalogHttpClient.GetItem(cartItem.ItemId);
                if (itemDto != null)
                {
                    result.Add(new CartItemDto(cartItem.Id, userId, itemDto.Id, cartItem.ItemQuantity, itemDto.Name, itemDto.Price));
                }
            }

			return result;
		}

        // DELETE: /clearUserCart
        [HttpDelete("/clearUserCart")]
		public async Task<ActionResult<List<CartItem>>> ClearCartItemsByUser()
		{
            int userId;
            try
            {
                userId = int.Parse(HttpContext.Items["UserId"]?.ToString() ?? "");
            }
            catch (Exception e)
            {
                return Unauthorized();
            }

            if (_context.CartItems == null)
			{
				return NotFound();
			}

			List<CartItem> cartItems = await _context.CartItems.Where(c => c.CustomerId == userId).ToListAsync();

            _context.CartItems.RemoveRange(cartItems);
			await _context.SaveChangesAsync();

			return Ok();
		}
	}
}
