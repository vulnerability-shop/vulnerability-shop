package main

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/cors"

	"github.com/vulnerability-shop/vulnerability-shop/purchase/api"
	"github.com/vulnerability-shop/vulnerability-shop/purchase/utils"
)

func main() {
	const port = 80

	utils.ConnectDB()
	defer utils.DB.Close()

	router := chi.NewRouter()
	router.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"https://*", "http://*"},
		AllowedMethods:   []string{"Get", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300, // Maximum value not ignored by any of major browsers
	}))
	router.Use(utils.ValidateTokenMiddleware)

	router.Get("/getPurchases", api.GetPurchases)
	router.Get("/getPurchaseById/:id", api.GetPurchaseById)
	router.Get("/getPurchasesForUser", api.GetPurchasesForUser)
	router.Post("/addPurchase", api.AddPurchase)

	router.Get("/item/getPurchaseItems", api.GetPurchaseItems)
	router.Get("/item/getPurchaseItemById/:id", api.GetPurchaseItemById)
	router.Get("/item/getPurchaseItemsForPurchase/:id", api.GetPurchaseItemsForPurchase)
	router.Post("/item/addPurchaseItem", api.AddPurchaseItem)

	router.Get("/ping", utils.Ping)
	utils.Register()

	fmt.Printf("Launched purchase microservice on port %d\n", port)
	http.ListenAndServe(fmt.Sprintf(":%d", port), router)
}
