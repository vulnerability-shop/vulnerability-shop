package utils

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"

	"github.com/vulnerability-shop/vulnerability-shop/purchase/models"
)

func FetchCartItems(customerToken string) ([]models.CartItemDto, error) {
	var items []models.CartItemDto

	cartUrl, err := GetService("cart")
	if err != nil {
		return items, errors.New("failed retrieving cart address")
	}

	url := fmt.Sprintf("%s/getUserItems", cartUrl)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Authorization", customerToken)
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	err = json.NewDecoder(resp.Body).Decode(&items)
	if err != nil {
		return nil, errors.New("failed retrieving cart items")
	}

	return items, nil
}

// function clear cart
func ClearCartItems(customerToken string) error {
	cartUrl, err := GetService("cart")
	if err != nil {
		return errors.New("failed retrieving cart address")
	}

	url := fmt.Sprintf("%s/clearUserCart", cartUrl)
	req, err := http.NewRequest("DELETE", url, nil)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", customerToken)
	client := &http.Client{}
	_, err = client.Do(req)

	return err
}
