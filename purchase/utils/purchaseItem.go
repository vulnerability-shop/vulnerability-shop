package utils

import (
	"context"
	"errors"
	"fmt"

	"github.com/vulnerability-shop/vulnerability-shop/purchase/models"
)

func addPurchaseItem(item models.PurchaseItem) error {

	// Vulnerability: SQL injection
	query := fmt.Sprintf("SELECT * FROM purchaseitem WHERE purchase_id='%d' AND item_id='%d'", item.PurchaseId, item.ItemId)

	// Query the database for any purchase that already contains the item/purchase pair
	rows, err := DB.Query(context.Background(), query)
	if err != nil {
		return errors.New("database query failed")
	}

	defer rows.Close()

	// If we find any rows, the purchaseItem already exists
	if rows.Next() {
		return errors.New("purchaseItem already exists")
	}

	// Vulnerabilities: SQL injection
	query = fmt.Sprintf("INSERT INTO purchaseitem (purchase_id,item_id,quantity) VALUES ('%d','%d','%d')",
		item.PurchaseId, item.ItemId, item.Quantity)

	// Add the purchase item to the database
	_, err = DB.Exec(context.Background(), query)
	if err != nil {
		return errors.New("purchaseItem insertion failed")
	}

	return nil
}
