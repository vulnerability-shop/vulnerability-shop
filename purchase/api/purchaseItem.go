package api

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"strconv"

	"github.com/vulnerability-shop/vulnerability-shop/purchase/models"
	"github.com/vulnerability-shop/vulnerability-shop/purchase/utils"
)

type PurchaseItem struct {
	Id         int `json:"id"`
	PurchaseId int `json:"purchase_id"`
	ItemId     int `json:"item_id"`
	Quantity   int `json:"quantity"`
}

func getPurchaseItems() ([]PurchaseItem, error) {
	var items []PurchaseItem

	rows, err := utils.DB.Query(context.Background(), "SELECT * FROM purchaseitem")
	if err != nil {
		return items, errors.New("failed retrieving purchase item")
	}

	defer rows.Close()

	for rows.Next() {
		var item PurchaseItem
		err = rows.Scan(&item.Id, &item.PurchaseId, &item.ItemId, &item.Quantity)
		if err != nil {
			return items, err
		}
		items = append(items, item)
	}

	if rows.Err() != nil {
		return items, err
	}

	return items, nil
}

func getPurchaseItemById(id int) (PurchaseItem, error) {
	var item PurchaseItem

	err := utils.DB.QueryRow(context.Background(), "SELECT * FROM purchaseitem WHERE id=$1",
		strconv.Itoa(id)).Scan(&item.Id, &item.PurchaseId, &item.ItemId, &item.Quantity)
	if err != nil {
		return item, errors.New("failed retrieving purchase item")
	}

	return item, nil
}

func getPurchaseItemsForPurchase(id int) ([]PurchaseItem, error) {
	var items []PurchaseItem

	rows, err := utils.DB.Query(context.Background(), "SELECT * FROM purchaseitem WHERE purchase_id=$1")
	if err != nil {
		return items, errors.New("failed retrieving purchase item")
	}

	defer rows.Close()

	for rows.Next() {
		var item PurchaseItem
		err = rows.Scan(&item.Id, &item.PurchaseId, &item.ItemId, &item.Quantity)
		if err != nil {
			return items, err
		}
		items = append(items, item)
	}

	if rows.Err() != nil {
		return items, err
	}

	return items, nil
}

func addPurchaseItem(w http.ResponseWriter, r *http.Request) {
	var item models.PurchaseItem

	err := json.NewDecoder(r.Body).Decode(&item)
	// Validate that all the information required was sent to us
	if err != nil || item.PurchaseId == 0 || item.ItemId == 0 || item.Quantity == 0 {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	err = utils.addPurchaseItem(item)
	if err != nil || item.PurchaseId == 0 || item.ItemId == 0 || item.Quantity == 0 {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	w.Write([]byte("PurchaseItem successfully created."))
}
