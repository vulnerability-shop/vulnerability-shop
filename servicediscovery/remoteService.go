package main

import (
	"net/http"
	"sync"
	"time"
)

type RemoteService struct {
	address string
	isAlive bool
	sync.RWMutex
}

func (s *RemoteService) Poll() {
	resp, err := http.Get("" + s.address + "/ping")
	if err != nil {
		s.Lock()
		defer s.Unlock()
		s.isAlive = false
		return
	}
	isAlive := resp.StatusCode == http.StatusOK
	s.RLock()
	if s.isAlive != isAlive {
		s.RUnlock()
		s.Lock()
		defer s.Unlock()
		s.isAlive = isAlive
	} else {
		s.RUnlock()
	}
}

type ServiceBag struct {
	collection map[string][]RemoteService
	sync.RWMutex
}

func (bag *ServiceBag) HealthCheckProcess() {
	for {
		bag.RLock()
		for _, services := range bag.collection {
			for _, service := range services {
				go service.Poll()
			}
		}
		bag.RUnlock()
		time.Sleep(2 * time.Second)
	}
}

func NewServiceBag() ServiceBag {
	return ServiceBag{make(map[string][]RemoteService), sync.RWMutex{}}
}

func (bag *ServiceBag) Register(name string, address string) {
	bag.Lock()
	defer bag.Unlock()
	if bag.collection[name] == nil {
		bag.collection[name] = []RemoteService{}
	}
	bag.collection[name] = append(bag.collection[name], RemoteService{address, true, sync.RWMutex{}})
}

func (bag *ServiceBag) GetByName(name string) []string {
	bag.RLock()
	defer bag.RUnlock()
	if bag.collection[name] == nil {
		return nil
	}
	var liveServices []string
	for _, service := range bag.collection[name] {
		if service.isAlive {
			liveServices = append(liveServices, service.address)
		}
	}
	return liveServices
}
