package servicediscovery

import (
	"log"
	"net/http"
	"net/url"
	"os"

	"github.com/go-chi/chi/v5"
)

func RequireToken(token string) func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			if r.Header.Get("authtoken") != token {
				http.Error(w, "Access denied, invalid token", http.StatusForbidden)
				return
			}
			next.ServeHTTP(w, r)
		})
	}
}

func (bag *ServiceBag) RegisterRequestHandle(w http.ResponseWriter, r *http.Request) {
	queryParams := r.URL.Query()
	if len(queryParams["name"][0]) > 3 {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
	}
	_, err := url.ParseRequestURI(queryParams["address"][0])
	if err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
	}
	bag.Register(queryParams["name"][0], queryParams["address"][0])
}

func (bag *ServiceBag) FindRequestHandler(w http.ResponseWriter, r *http.Request) {
	queryParams := r.URL.Query()
	w.Header().Set("Content-Type", "application/json")
	services := bag.GetByName(queryParams["name"][0])
	if services == nil {
		http.Error(w, "Service not found", http.StatusNotFound)
		return
	}
	w.Write(services)
}

func main() {
	//exploitable vulnerability
	token := os.Args[1]
	bag := NewServiceBag()
	bag.HealthCheckProcess()
	r := chi.NewRouter()
	r.Use(RequireToken(token))
	r.HandleFunc("/register", bag.RegisterRequestHandle)
	r.HandleFunc("/find", bag.FindRequestHandler)
	err := http.ListenAndServe(":4000", r)
	if err != nil {
		log.Println(err)
	}
}
