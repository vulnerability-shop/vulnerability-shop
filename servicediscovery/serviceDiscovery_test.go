package main

import (
	"net/http"
	"net/http/httptest"
	"sync"
	"testing"
)

func TestRegister(t *testing.T) {
	s := Services{make(map[string][]Service), sync.RWMutex{}}
	s.register("stm", "http://portainer.10.194.33.151.nip.io:3000")
	if len(s.listOfServices["stm"]) == 1 {
		t.Logf("register(stm, http://portainer.10.194.33.151.nip.io:3000) PASSED. EXPECTED 1")
	} else {
		t.Errorf("register(stm, http://portainer.10.194.33.151.nip.io:3000) FAILED. EXPECTED 1")
	}
}

func TestGetAddress(t *testing.T) {
	s := Services{make(map[string][]Service), sync.RWMutex{}}
	s.register("stm", "http://portainer.10.194.33.151.nip.io:3000")
	if len(s.getAddress("stm")) != 0 {
		t.Logf("getAddress(stm) PASSED. EXPECTED 1")
	} else {
		t.Errorf("getAddress(stm) FAILED. EXPECTED 1")
	}
}

func TestUnRegister(t *testing.T) {
	s := Services{make(map[string][]Service), sync.RWMutex{}}
	s.register("stm", "http://portainer.10.194.33.151.nip.io:3000")
	s.unRegister("stm", "http://portainer.10.194.33.151.nip.io:3000")
	if len(s.getAddress("stm")) == 0 {
		t.Logf("unregister(stm, http://portainer.10.194.33.151.nip.io:3000) PASSED. EXPECTED 0")
	} else {
		t.Errorf("unregister(stm, http://portainer.10.194.33.151.nip.io:3000) FAILED. EXPECTED 0")
	}
}

func TestRegisterHandler(t *testing.T) {
	s := Services{make(map[string][]Service), sync.RWMutex{}}
	req, err := http.NewRequest("GET", "/register", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(s.registerHandler)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusOK)
	} else {
		t.Logf("registerHandler() PASSED. EXPECTED 200")
	}
}

func TestGetAddressHandler(t *testing.T) {
	s := Services{make(map[string][]Service), sync.RWMutex{}}
	req, err := http.NewRequest("GET", "/getAddress", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(s.getAddressHandler)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusOK)
	} else {
		t.Logf("getAddressHandler() PASSED. EXPECTED 200")
	}
}
