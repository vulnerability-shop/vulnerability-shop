import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { getUserIdFromToken } from "../authHelper";
import {
  Button,
  FormControl,
  FormLabel,
  Heading,
  Image,
  Input,
  Text,
  Table,
  VStack,
  Box,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@chakra-ui/react";

interface Props { }

interface Product {
  id: number;
  name: string;
  price: number;
  stock: number;
  image: string;
  description: string;
}

interface Review {
  id: number;
  productId: number;
  customerId: number;
  reviewText: string;
  imageUrl?: string;
  timeCreated: string;
  timeUpdated: string;
}

interface RouteParams {
  id: string;
}
const ProductDetail: React.FC<Props> = () => {
  const { id } = useParams<RouteParams>();
  const [product, setProduct] = useState<Product | null>(null);
  const [reviews, setReviews] = useState<Review[]>([]);
  const [newReviewTitle, setNewReviewTitle] = useState("");
  const [newReviewText, setNewReviewText] = useState("");
  const [newReviewImage, setNewReviewImage] = useState<File | null>(null);
  const token = localStorage.getItem("token") ?? "";

  // Load product data on mount
  useEffect(() => {
    getProductDetails();
    getReviews();
  }, []);

  // Load product data
  const getProductDetails = async () => {
    try {
      const response = await fetch(`http://localhost:5181/getItem/${id}`);
      if (response.status == 200) {
        const data = await response.json();
        setProduct(data);
        console.log(data);
      }
    } catch (error) {
      console.log(error);
    }
  };

  // Load reviews
  const getReviews = async () => {
    try {
      const response = await fetch(`http://localhost:5183/getReviewsForItem/${id}`, {
        //const response = await fetch(`http://localhost:5183/getReviews`, {
        headers: {
          'Authorization': `${token}`,
        }
      });

      if (response.status == 200) {
        const data = await response.json();
        const reviewWithPictures = await Promise.all(
          data.map(async (review: Review) => {
            const pictures = await getReviewPictures(review.id);
            if (pictures.length > 0) {
              review.imageUrl = `http://localhost:5183/getPicture/${pictures[0].id}`;
            }
            return review;
          })
        );
        setReviews(reviewWithPictures);
      }
    } catch (error) {
      console.log(error);
    }
  };

  // Load review pictures
  const getReviewPictures = async (reviewId: number) => {
    try {
      const response = await fetch(`http://localhost:5183/getPictures/${reviewId}`, {
        headers: {
          'Authorization': `${token}`,
        },
      });

      if (response.status === 200) {
        const data = await response.json();
        return data;
      }
    } catch (error) {
      console.log(error);
    }
    return [];
  };


  const handleNewReviewTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setNewReviewTitle(event.target.value);
  };

  const handleNewReviewTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    setNewReviewText(event.target.value);
  };

  const handleNewReviewImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      setNewReviewImage(event.target.files[0]);
    }
  };

  const handleAddReview = async () => {
    try {
      const userId = getUserIdFromToken(token);
      if (!userId) {
        console.log("Error getting user id from token");
        return;
      }

      const response = await fetch(`http://localhost:5183/postReview`, {
        method: "POST",
        body: JSON.stringify({
          ItemId: parseInt(id, 10),
          CustomerId: userId,
          Title: newReviewTitle,
          ReviewText: newReviewText
        }),
        headers: {
          "Content-Type": "application/json",
          'Authorization': `${token}`,
        },
      });

      if (response.status == 200) {
        const reviewId = await response.json();

        if (newReviewImage) {
          const formData = new FormData();
          formData.append("picture", newReviewImage!);

          const imgResponse = await fetch(`http://localhost:5183/postPicture/${reviewId}`,
            {
              method: "POST",
              body: formData,
              headers: {
                'Authorization': `${token}`,
              },
            }
          );

          if (imgResponse.status !== 200) {
            console.log("Error uploading image");
          }
        }
        setNewReviewTitle("");
        setNewReviewText("");
        setNewReviewImage(null);
        getReviews();

      } else {
        console.log("Error adding review");
      }
    } catch (error) {
      console.log(error);
    }
  };




  return (
    <VStack spacing={4} alignItems="flex-start" >
      <Table>
        <Thead>
          <Tr>
            <Th>Name</Th>
            <Th>Price</Th>
            <Th>Stock</Th>
            <Th>Image</Th>
            <Th>Description</Th>
          </Tr>
        </Thead>
        <Tbody>
          <Tr>
            <Td>{product?.name}</Td>
            <Td>{product?.price}</Td>
            <Td>{product?.stock}</Td>
            <Td>
              <img src={product?.image} alt="Product" maxW="150px" maxH="150px" />
            </Td>
            <Td>{product?.description}</Td>
          </Tr>
        </Tbody>
      </Table>

      <FormControl>
        <FormControl> Title of the review </FormControl>
        <Input value={newReviewTitle} focusBorderColor='lime' onChange={handleNewReviewTitleChange} placeholder="Enter your review title" />
      </FormControl>
      <FormControl>
        <FormLabel>What is your review?</FormLabel>
        <Input value={newReviewText} focusBorderColor='lime' onChange={handleNewReviewTextChange} placeholder="Enter your review" />
      </FormControl>
      <FormControl>
        <FormLabel>Upload Image</FormLabel>
        <Input type="file" accept="image/*" onChange={handleNewReviewImageChange} />
      </FormControl>
      <Button onClick={handleAddReview}>Submit Review</Button>

      {reviews.length > 0 ? (
        <Box>
          <Heading size="md">Reviews</Heading>
          {reviews.map((review) => (
            <Box key={review.id} borderWidth="1px" borderRadius="lg" p="4">
              <div 
                dangerouslySetInnerHTML={{__html: review.reviewText}} 
              />
              {review.imageUrl && (
                <Box mt="4">
                  <Image src={review.imageUrl} alt="Review" maxW="150px" maxH="150px" />
                </Box>
              )}
              <Box mt="4">
                <Text fontSize="sm">
                  By {review.customerId} on {new Date(review.timeCreated).toLocaleString()}
                </Text>
              </Box>
            </Box>
          ))}
        </Box>
      ) : (
        <Box>
          <Heading size="md">No reviews found for this product</Heading>
        </Box>
      )
      }
    </VStack >
  );
};

export default ProductDetail;