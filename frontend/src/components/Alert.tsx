import React, { ReactNode } from 'react';

export enum AlertType {
  error = 'alert-error',
  success = 'alert-success'
}

interface AlertProps {
  children: ReactNode;
  type: AlertType;
  className?: string;
}

function Alert(props: AlertProps) {
  let icon;

  switch (props.type) {
    case AlertType.error:
      icon = (
        <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      );
      break;
    case AlertType.success:
      icon = (
        <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      );
      break;
    default:
      icon = (
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" className="stroke-info flex-shrink-0 w-6 h-6">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      );
  }

  return (
    <div className={`alert ${props.type} shadow-lg ${props.className}`}>
      <div>
        {icon}
        <span>{props.children}</span>
      </div>
    </div>
  );
}

export default Alert;
