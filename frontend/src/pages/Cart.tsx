import { useEffect, useState } from "react";



interface CartItem {
    id: number;
    itemId: number; 
    itemQuantity: number;
    itemName: string;   
    itemPrice: number;    
}

function Cart() {
    const [cartItems, setCartItems] = useState([]);

    useEffect(() => {
        getCartItems();
    }, []);

    const getCartItems = async () => {
        try{ 
            const token = localStorage.getItem('token')??'string';
            console.log(token);
            const response = await fetch(`http://127.0.0.1:5197/getUserItems`, {
                method: 'GET', 
                headers: {
                'Authorization':  `${token}`,
              }});
            if (response.status == 200) {
                const data = await response.json();
                setCartItems(data);
                console.log(data);
            }      
        } catch (error) {
            console.log(error);
        }
    }

    const updateCartItem = async (item: CartItem, Quantity: number) => {
      try{ 
          item.itemQuantity = Quantity;
          //cartItems[i].itemQuantity = Quantity;
          //getC
          //setCartItems(cartItems);
          const token = localStorage.getItem('token')??'string';
          console.log(token);
          const response = await fetch(`http://127.0.0.1:5197/updateCartItem`, {
              method: 'PUT', 
              headers: {
                'content-type': 'application/json',
                'Authorization':  `${token}`,
              },
              body:  JSON.stringify(item)
          });
          if (response.status == 200) {
              const data = await response.json();
              console.log(data);
              // TODO Find item in state, update item, setState?
              // setCartItems(data);
              // console.log(data);
          }      
      } catch (error) {
          console.log(error);
      }
    }

    const removeCartItem = async (itemID: number) => {
      console.log(itemID);
      try{   
          const token = localStorage.getItem('token')??'string';
          console.log(token);
          const response = await fetch(`http://127.0.0.1:5197/removeCartItem/${itemID}`, {
              method: 'DELETE', 
              headers: {
                'Authorization':  `${token}`,
              },
          });
          if (response.status == 200) {
              const data = await response.json();

              // TODO Find item in state, update item, setState?
              // setCartItems(data);
              // console.log(data);
          }      
      } catch (error) {
          console.log(error);
      }
    }

    const clearCart = async () => {
      try{   
          const token = localStorage.getItem('token')??'string';
          console.log(token);
          const response = await fetch(`http://127.0.0.1:5197/clearUserCart/`, {
              method: 'DELETE', 
              headers: {
                'Authorization':  `${token}`,
              },
          });
          if (response.status == 200) {
              const data = await response.json();

              // TODO go back to home
          }      
      } catch (error) {
          console.log(error);
      }
    }
          
    return (    
      <div className="mt-2 flex flex-col">
        <div className="-my-2 overflow-x-auto -mx-4 sm:-mx-6 lg:-mx-8">
          <div className="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
            <div className="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
              <table>
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Remove One</th>
                    <th>Add one</th>
                    <th>Delete from cart</th>
                  </tr>
                </thead>
                <tbody>
                  {cartItems.map((item, i) => (
                    <tr key={item.itemId}>
                      <td>{item.itemName}</td>
                      <td>{item.itemPrice}</td>
                      <td>{item.itemQuantity}</td>
                      <td><button onClick={() => {updateCartItem(item, (item.itemQuantity - 1))}}>-</button></td>
                      <td><button onClick={() => {updateCartItem(item, (item.itemQuantity + 1))}}>+</button></td>
                      <td><button onClick={() => {removeCartItem(item.id)}}>x</button></td>
                    </tr>
                  ))}  
                </tbody>           
              </table>    
            </div>
            <button onClick={() => {clearCart()}}>Clear Cart</button>
          </div>
        </div>
      </div>
    );
    
    
}

export default Cart;